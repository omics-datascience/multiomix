# Generated by Django 3.1.2 on 2021-01-21 15:00
from typing import Optional
from django.db import migrations, models
import django.db.models.deletion
from django.db.models import Q
from api_service.models import ExperimentClinicalSource
from datasets_synchronization.models import CGDSDataset, CGDSDatasetSynchronizationState


def get_reverse_study_of_dataset(dataset: CGDSDataset):
    """
    Gets the related study model's name. It's copied and pasted from models.py due to:
    https://stackoverflow.com/q/3314173/7058363
    """
    if hasattr(dataset, 'mrna_dataset'):
        return dataset.mrna_dataset
    elif hasattr(dataset, 'mirna_dataset'):
        return dataset.mirna_dataset
    elif hasattr(dataset, 'cna_dataset'):
        return dataset.cna_dataset
    elif hasattr(dataset, 'methylation_dataset'):
        return dataset.methylation_dataset
    elif hasattr(dataset, 'clinical_patient_dataset'):
        return dataset.clinical_patient_dataset
    elif hasattr(dataset, 'clinical_sample_dataset'):
        return dataset.clinical_sample_dataset


def generate_clinical_source(dataset: CGDSDataset):
    """
    Generates a ExperimentClinicalSource instance (if dataset is valid) from a CGDSDataset
    @param dataset: CGDSDataset to get needed clinical data
    @return: ExperimentClinicalSource instance if dataset's clinical data is valid. None otherwise
    """
    clinical_source = None
    if dataset:
        source_study = get_reverse_study_of_dataset(dataset)
        if (source_study.clinical_patient_dataset and source_study.clinical_sample_dataset) and \
                (source_study.clinical_patient_dataset.state == CGDSDatasetSynchronizationState.SUCCESS and
                 source_study.clinical_sample_dataset.state == CGDSDatasetSynchronizationState.SUCCESS):
            clinical_source = ExperimentClinicalSource.objects.create(
                user_file=None,
                cgds_dataset=source_study.clinical_patient_dataset,
                extra_cgds_dataset=source_study.clinical_sample_dataset
            )
    return clinical_source


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Experiment = apps.get_model("api_service", "Experiment")
    db_alias = schema_editor.connection.alias

    # Generates clinical_dataset for all the experiment made from CGDSDatasets as sources
    experiments = Experiment.objects.filter(Q(mRNA_source__user_file=None) | Q(gem_source__user_file=None))
    for i in range(len(experiments)):
        # Gets both sources. mRNA source has priority
        mrna_source_cgds = experiments[i].mRNA_source.cgds_dataset
        clinical_source = generate_clinical_source(mrna_source_cgds)
        if clinical_source is None:
            # If there's a GEM source which study has complete clinical data, sets it as clinical source.
            # This should not happen as users should run analysis with the same CGDSStudy, so it would be enough
            # with mRNA source, but this block prevents errors
            gem_source_cgds = experiments[i].gem_source.cgds_dataset
            clinical_source = generate_clinical_source(gem_source_cgds)
        experiments[i].clinical_source = clinical_source

    Experiment.objects.using(db_alias).bulk_update(experiments, ['clinical_source'])


def reverse_func(apps, schema_editor):
    # reverse_func() sets all the Clinical sources to None
    Experiment = apps.get_model("api_service", "Experiment")
    db_alias = schema_editor.connection.alias
    Experiment.objects.using(db_alias).all().update(clinical_source=None)


class Migration(migrations.Migration):

    dependencies = [
        ('datasets_synchronization', '0026_auto_20210120_2251'),
        ('api_service', '0045_auto_20210115_1737'),
    ]

    operations = [
        migrations.AlterField(
            model_name='experiment',
            name='gem_source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gem_source', to='api_service.experimentsource'),
        ),
        migrations.CreateModel(
            name='ExperimentClinicalSource',
            fields=[
                ('experimentsource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api_service.experimentsource')),
                ('extra_cgds_dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='datasets_synchronization.cgdsdataset')),
            ],
            bases=('api_service.experimentsource',),
        ),
        migrations.AddField(
            model_name='experiment',
            name='clinical_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinical_source', to='api_service.experimentclinicalsource'),
        ),
        migrations.RunPython(forwards_func, reverse_func),
    ]
